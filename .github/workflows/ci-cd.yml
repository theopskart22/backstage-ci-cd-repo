name: CI/CD Pipeline

on:
  workflow_dispatch:  # Trigger on manual workflow dispatch
    inputs:
      applicationrepo:
        description: 'Name of the React application repo'
        required: true
      branchOrTagName:
        description: 'Name of the branch to checkout'
        required: true

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Show repository URL
        run: echo ${{ inputs.applicationrepo }}:${{ inputs.branchOrTagName }}
        
      - name: Checkout React App Repository
        uses: actions/checkout@v3
        with:
          repository: ${{ inputs.applicationrepo }}
          ref: ${{ inputs.branchOrTagName }}
          token: ${{ secrets.backstage_token }}

      - name: Extract app name from package.json
        id: extract_app_name
        run: |
          APP_NAME=$(jq -r '.name' package.json)
          echo "APP_NAME=${APP_NAME}"
          echo "APP_NAME=${APP_NAME}" >> $GITHUB_ENV

      - name: Verify APP_NAME environment variable
        run: echo "APP_NAME is set to ${{ env.APP_NAME }}"

      - name: Package code as zip
        run: |
          zip -r react-app.zip .

      - name: Setup SSH key
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.EC2_KEY }}

      - name: Add EC2 to known hosts
        run: |
          ssh-keyscan -H -t rsa ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Copy zip to EC2
        env:
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
        run: |
          scp react-app.zip $EC2_USER@$EC2_HOST:~/react-app.zip

      - name: SSH to EC2 and deploy
        env:
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          APP_NAME: ${{ env.APP_NAME }}
        run: |
          ssh $EC2_USER@$EC2_HOST << 'EOF'
          set -x
          # Print environment variables for debugging
          echo "EC2_USER=$EC2_USER"
          echo "EC2_HOST=$EC2_HOST"
          echo "APP_NAME=$APP_NAME"

          # Stop any existing instance of the application
          if pgrep -f "npm start" > /dev/null; then
            pkill -f "npm start"
          fi

          # Remove old app directory if it exists
          if [ -d "~/apps/$APP_NAME" ]; then
            rm -rf "~/apps/$APP_NAME"
          fi

          # Create the application directory
          mkdir -p ~/apps/$APP_NAME

          # Verify directory creation
          if [ ! -d "~/apps/$APP_NAME" ]; then
            echo "Failed to create directory ~/apps/$APP_NAME"
            exit 1
          fi

          # Unzip the new code into the application directory
          unzip -o ~/react-app.zip -d ~/apps/$APP_NAME

          # Change ownership to ec2-user
          sudo chown -R ec2-user:ec2-user ~/apps/$APP_NAME

          # Navigate to the app directory and install dependencies
          cd ~/apps/$APP_NAME
          npm install

          # Start the application
          nohup npm start > app.log 2>&1 &
          exit
          EOF
